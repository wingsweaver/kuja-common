package com.wingsweaver.kuja.common.utils.support.idgen.snowflake;

import com.wingsweaver.kuja.common.utils.exception.ExtendedRuntimeException;
import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import lombok.Getter;
import lombok.Setter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.support.GeneratedKeyHolder;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

/**
 * 基于 JDBC 的 {@link WorkerIdResolver} 实现类。
 *
 * @author wingsweaver
 */
@Getter
@Setter
public class JdbcWorkerIdResolver extends AbstractWorkerIdResolver {
    /**
     * JdbcTemplate 实例。
     */
    private JdbcTemplate jdbcTemplate;

    /**
     * 获取 WorkerId 的 SQL 语句。
     */
    private String sql;

    /**
     * 是否自动生成 Key。
     */
    private int autoGeneratedKeys = Statement.RETURN_GENERATED_KEYS;

    /**
     * PreparedStatementSetter 实例。<br>
     * 如果不设置的话，直接使用 {@link #sql} 定义的 SQL 语句。
     */
    private PreparedStatementSetter preparedStatementSetter;

    public JdbcWorkerIdResolver(int bits) {
        super(bits);
    }

    @Override
    protected int resolveWorkerIdInternal() {
        GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();
        this.jdbcTemplate.update(this::createStatement, keyHolder);
        return keyHolder.getKey().intValue();
    }

    /**
     * 设置 PreparedStatement 的参数。
     *
     * @param preparedStatement PreparedStatement 实例
     */
    protected void setStatementValues(PreparedStatement preparedStatement) {
        if (this.preparedStatementSetter != null) {
            try {
                this.preparedStatementSetter.setValues(preparedStatement);
            } catch (Exception e) {
                throw new ExtendedRuntimeException("Failed to set values to PreparedStatement", e)
                        .withExtendedAttribute("query", this.sql);
            }
        }
    }

    /**
     * 创建查询用的 PrepareStatement。
     *
     * @param connection Connection 实例
     * @return PreparedStatement 实例
     */
    @SuppressFBWarnings("SQL_INJECTION_JDBC")
    protected PreparedStatement createStatement(Connection connection) {
        try {
            PreparedStatement preparedStatement = connection.prepareStatement(this.sql, this.autoGeneratedKeys);
            this.setStatementValues(preparedStatement);
            return preparedStatement;
        } catch (Exception e) {
            throw new ExtendedRuntimeException("Failed to create PreparedStatement", e)
                    .withExtendedAttribute("query", this.sql);
        }
    }

    /**
     * 从 ResultSet 中解析出 worker id。
     *
     * @param resultSet ResultSet 实例
     * @return worker id
     */
    protected int parseResult(ResultSet resultSet) {
        try {
            if (resultSet.next()) {
                return resultSet.getInt(1);
            }
        } catch (Exception e) {
            throw new ExtendedRuntimeException("Failed to resolve worker id from JDBC", e)
                    .withExtendedAttribute("query", this.sql);
        }
        return 0;
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        super.afterPropertiesSet();

        // 初始化 JdbcTemplate
        this.initJdbcTemplate();
    }

    /**
     * 初始化 JdbcTemplate。
     */
    protected void initJdbcTemplate() {
        if (this.jdbcTemplate == null) {
            this.jdbcTemplate = this.getBean(JdbcTemplate.class);
        }
    }
}
